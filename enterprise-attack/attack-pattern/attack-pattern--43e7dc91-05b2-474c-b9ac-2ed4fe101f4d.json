{
    "type": "bundle",
    "id": "bundle--009df041-80e7-4e0f-a34c-1e4e30c664be",
    "spec_version": "2.0",
    "objects": [
        {
            "type": "attack-pattern",
            "id": "attack-pattern--43e7dc91-05b2-474c-b9ac-2ed4fe101f4d",
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",
            "created": "2017-05-31T21:30:47.843Z",
            "modified": "2017-12-14T16:55:59.600Z",
            "name": "DLL Injection",
            "description": "DLL injection is used to run code in the context of another process by causing the other process to load and execute code. Running code in the context of another process provides adversaries many benefits, such as access to the process's memory and permissions. It also allows adversaries to mask their actions under a legitimate process. A more sophisticated kind of DLL injection, reflective DLL injection, loads code without calling the normal Windows API calls, potentially bypassing DLL load monitoring. Numerous methods of DLL injection exist on Windows, including modifying the Registry, creating remote threads, Windows hooking APIs, and DLL pre-loading. (Citation: CodeProject Inject Code) (Citation: Wikipedia DLL Injection)\n\nDetection: Monitoring API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. API calls such as CreateRemoteThread and those that can be used to modify memory within another process, such as WriteProcessMemory, may be used for this technique.\n\nMonitor processes and command-line arguments for actions that could be done before or after code injection has occurred and correlate the information with related event information. Code injection may also be performed using PowerShell with tools such as PowerSploit, (Citation: Powersploit) so additional PowerShell monitoring may be required to cover known implementations of this behavior.\n\nPlatforms: Windows Server 2003, Windows Server 2008, Windows Server 2012, Windows XP, Windows 7, Windows 8, Windows Server 2003 R2, Windows Server 2008 R2, Windows Server 2012 R2, Windows Vista, Windows 8.1, Windows 10\n\nData Sources: API monitoring, Windows Registry, File monitoring, Process monitoring\n\nEffective Permissions: User, Administrator, SYSTEM\n\nDefense Bypassed: Process whitelisting, Anti-virus\n\nPermissions Required: User, Administrator, SYSTEM",
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack",
                    "phase_name": "defense-evasion"
                },
                {
                    "kill_chain_name": "mitre-attack",
                    "phase_name": "privilege-escalation"
                }
            ],
            "external_references": [
                {
                    "source_name": "mitre-attack",
                    "url": "https://attack.mitre.org/wiki/Technique/T1055",
                    "external_id": "T1055"
                },
                {
                    "source_name": "CodeProject Inject Code",
                    "description": "Kuster, R. (2003, August 20). Three Ways to Inject Your Code into Another Process. Retrieved November 12, 2014.",
                    "url": "http://www.codeproject.com/Articles/4610/Three-Ways-to-Inject-Your-Code-into-Another-Proces"
                },
                {
                    "source_name": "Wikipedia DLL Injection",
                    "description": "DLL injection. (n.d.).  Retrieved November 12, 2014.",
                    "url": "http://en.wikipedia.org/wiki/DLL%20injection"
                },
                {
                    "source_name": "Powersploit",
                    "description": "PowerSploit. (n.d.).  Retrieved December 4, 2014.",
                    "url": "https://github.com/mattifestation/PowerSploit"
                }
            ],
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ],
            "x_mitre_data_sources": [
                "API monitoring",
                "Windows Registry",
                "File monitoring",
                "Process monitoring"
            ],
            "x_mitre_defense_bypassed": [
                "Process whitelisting",
                "Anti-virus"
            ],
            "x_mitre_effective_permissions": [
                "User",
                "Administrator",
                "SYSTEM"
            ],
            "x_mitre_permissions_required": [
                "User",
                "Administrator",
                "SYSTEM"
            ],
            "x_mitre_platforms": [
                "Windows Server 2003",
                "Windows Server 2008",
                "Windows Server 2012",
                "Windows XP",
                "Windows 7",
                "Windows 8",
                "Windows Server 2003 R2",
                "Windows Server 2008 R2",
                "Windows Server 2012 R2",
                "Windows Vista",
                "Windows 8.1",
                "Windows 10"
            ]
        }
    ]
}