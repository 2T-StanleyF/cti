{
    "type": "bundle",
    "id": "bundle--a641d1f0-b0ad-463a-9bab-2733fbfc9f35",
    "spec_version": "2.0",
    "objects": [
        {
            "id": "attack-pattern--98be40f2-c86b-4ade-b6fc-4964932040e5",
            "description": "Adversaries may inject malicious code into processes via VDSO hijacking in order to evade process-based defenses as well as possibly elevate privileges. Virtual dynamic shared object (VDSO) hijacking is a method of executing arbitrary code in the address space of a separate live process. \n\nVDSO hijacking involves redirecting calls to dynamically linked shared libraries mapped into all user-land processes by the kernel. An adversary may patch memory address references stored in a process' global offset table (which store absolute addresses of functions) to inject malicious code into a running process. This code can then be invoked by redirecting the execution flow of the process (ex: using custom shellcode or hijacked system calls). (Citation: ELF Injection May 2009) \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via VDSO hijacking may also evade detection from security products since the execution is masked under a legitimate process.  ",
            "name": "VDSO Hijacking",
            "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",
            "object_marking_refs": [
                "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
            ],
            "external_references": [
                {
                    "source_name": "mitre-attack",
                    "external_id": "T1055.014",
                    "url": "https://attack.mitre.org/techniques/T1055/014"
                },
                {
                    "source_name": "ELF Injection May 2009",
                    "url": "https://web.archive.org/web/20150711051625/http://vxer.org/lib/vrn00.html",
                    "description": "O'Neill, R. (2009, May). Modern Day ELF Runtime infection via GOT poisoning. Retrieved March 15, 2020."
                },
                {
                    "description": "Ligh, M.H. et al.. (2014, July). The Art of Memory Forensics: Detecting Malware and Threats in Windows, Linux, and Mac Memory. Retrieved December 20, 2017.",
                    "source_name": "ArtOfMemoryForensics"
                },
                {
                    "url": "https://www.gnu.org/software/acct/",
                    "description": "GNU. (2010, February 5). The GNU Accounting Utilities. Retrieved December 20, 2017.",
                    "source_name": "GNU Acct"
                },
                {
                    "url": "https://access.redhat.com/documentation/red_hat_enterprise_linux/6/html/security_guide/chap-system_auditing",
                    "description": "Jahoda, M. et al.. (2017, March 14). redhat Security Guide - Chapter 7 - System Auditing. Retrieved December 20, 2017.",
                    "source_name": "RHEL auditd"
                },
                {
                    "url": "http://www.chokepoint.net/2014/02/detecting-userland-preload-rootkits.html",
                    "description": "stderr. (2014, February 14). Detecting Userland Preload Rootkits. Retrieved December 20, 2017.",
                    "source_name": "Chokepoint preload rootkits"
                }
            ],
            "type": "attack-pattern",
            "kill_chain_phases": [
                {
                    "kill_chain_name": "mitre-attack",
                    "phase_name": "defense-evasion"
                },
                {
                    "kill_chain_name": "mitre-attack",
                    "phase_name": "privilege-escalation"
                }
            ],
            "modified": "2020-03-26T20:58:10.186Z",
            "created": "2020-01-14T01:35:00.781Z",
            "x_mitre_version": "1.0",
            "x_mitre_is_subtechnique": true,
            "x_mitre_platforms": [
                "Linux",
                "macOS"
            ],
            "x_mitre_data_sources": [
                "System calls",
                "Process monitoring"
            ],
            "x_mitre_detection": "Monitor for malicious usage of system calls, such as ptrace and mmap, that can be used to attach to, manipulate memory, then redirect a processes' execution path. Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.(Citation: ArtOfMemoryForensics)  (Citation: GNU Acct)  (Citation: RHEL auditd)  (Citation: Chokepoint preload rootkits) \n\nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",
            "x_mitre_defense_bypassed": [
                "Anti-virus",
                "Process whitelisting"
            ]
        }
    ]
}