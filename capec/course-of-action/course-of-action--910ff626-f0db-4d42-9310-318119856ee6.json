{
    "type": "bundle",
    "id": "bundle--5f2abf3b-7df5-4550-98b5-ad74e5520757",
    "spec_version": "2.0",
    "objects": [
        {
            "type": "course-of-action",
            "id": "course-of-action--910ff626-f0db-4d42-9310-318119856ee6",
            "created_by_ref": "identity--99e72de9-cd42-43b1-906d-c4f855fd3322",
            "created": "2014-06-23T00:00:00.000Z",
            "modified": "2019-04-04T00:00:00.000Z",
            "name": "coa-123-0",
            "description": "To help protect an application from buffer manipulation attacks, a number of potential mitigations can be leveraged. Before starting the development of the application, consider using a code language (e.g., Java) or compiler that limits the ability of developers to act beyond the bounds of a buffer. If the chosen language is susceptible to buffer related issues (e.g., C) then consider using secure functions instead of those vulnerable to buffer manipulations. If a potentially dangerous function must be used, make sure that proper boundary checking is performed. Additionally, there are often a number of compiler-based mechanisms (e.g., StackGuard, ProPolice and the Microsoft Visual Studio /GS flag) that can help identify and protect against potential buffer issues. Finally, there may be operating system level preventative functionality that can be applied.",
            "object_marking_refs": [
                "marking-definition--7af89974-8179-4268-a77a-47d3f7bc1c89"
            ]
        }
    ]
}