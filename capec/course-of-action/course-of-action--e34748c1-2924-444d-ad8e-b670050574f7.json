{
    "type": "course-of-action",
    "id": "course-of-action--e34748c1-2924-444d-ad8e-b670050574f7",
    "created_by_ref": "identity--2888a06a-5541-4bad-8066-df6f196f70ff",
    "created": "2018-03-05T19:00:33.947Z",
    "modified": "2018-03-05T19:00:33.947Z",
    "name": "coa-123-0",
    "description": "To help protect an application from buffer manipulation attacks, a number of potential mitigations can be leveraged. Before starting the development of the application, consider using a code language (e.g., Java) or compiler that limits the ability of developers to act beyond the bounds of a buffer. If the chosen language is susceptible to buffer related issues (e.g., C) then consider using secure functions instead of those vulnerable to buffer manipulations. If a potentially dangerous function must be used, make sure that proper boundary checking is performed. Additionally, there are often a number of compiler-based mechanisms (e.g., StackGuard, ProPolice and the Microsoft Visual Studio /GS flag) that can help identify and protect against potential buffer issues. Finally, there may be operating system level preventative functionality that can be applied.",
    "object_marking_refs": [
        "marking-definition--ad91480b-92ca-4958-92fe-407f4493dcb9"
    ]
}