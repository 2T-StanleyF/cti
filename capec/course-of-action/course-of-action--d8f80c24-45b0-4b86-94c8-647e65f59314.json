{
    "type": "course-of-action",
    "id": "course-of-action--d8f80c24-45b0-4b86-94c8-647e65f59314",
    "created_by_ref": "identity--8641df51-0f59-4a4d-a300-7f11ca320ba2",
    "created": "2018-03-05T19:11:05.331Z",
    "modified": "2018-03-05T19:11:05.331Z",
    "name": "coa-123-0",
    "description": "To help protect an application from buffer manipulation attacks, a number of potential mitigations can be leveraged. Before starting the development of the application, consider using a code language (e.g., Java) or compiler that limits the ability of developers to act beyond the bounds of a buffer. If the chosen language is susceptible to buffer related issues (e.g., C) then consider using secure functions instead of those vulnerable to buffer manipulations. If a potentially dangerous function must be used, make sure that proper boundary checking is performed. Additionally, there are often a number of compiler-based mechanisms (e.g., StackGuard, ProPolice and the Microsoft Visual Studio /GS flag) that can help identify and protect against potential buffer issues. Finally, there may be operating system level preventative functionality that can be applied.",
    "object_marking_refs": [
        "marking-definition--127d62dd-9993-48ef-9ef1-a9c686da9914"
    ]
}