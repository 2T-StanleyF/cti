{
    "type": "attack-pattern",
    "id": "attack-pattern--0a1a1a79-29f2-4ad4-9180-581db2bb3bf8",
    "created_by_ref": "identity--2888a06a-5541-4bad-8066-df6f196f70ff",
    "created": "2018-03-05T19:00:33.946Z",
    "modified": "2018-03-05T19:00:33.946Z",
    "name": "Buffer Manipulation",
    "description": "An adversary manipulates an application's interaction with a buffer in an attempt to read or modify data they shouldn't have access to. Buffer attacks are distinguished in that it is the buffer space itself that is the target of the attack rather than any code responsible for interpreting the content of the buffer. In virtually all buffer attacks the content that is placed in the buffer is immaterial. Instead, most buffer attacks involve retrieving or providing more input than can be stored in the allocated buffer, resulting in the reading or overwriting of other unintended program memory.",
    "external_references": [
        {
            "source_name": "capec",
            "url": "https://capec.mitre.org/data/definitions/123.html",
            "external_id": "CAPEC-123"
        }
    ],
    "object_marking_refs": [
        "marking-definition--ad91480b-92ca-4958-92fe-407f4493dcb9"
    ],
    "x_capec_abstraction": "Meta",
    "x_capec_consequences": {
        "A buffer manipulation attack often results in a crash of the application due to the corruption of memory.": "DoS: crash / exit / restart",
        "If constructed properly, a buffer manipulation attack can be used to contol the execution of the application leading to any number of negative consequenses.": "Execute unauthorized code or commands"
    },
    "x_capec_likelihood_of_attack": "High",
    "x_capec_prerequisites": [
        "The adversary must identify a programmatic means for interacting with a buffer, such as vulnerable C code, and be able to provide input to this interaction."
    ],
    "x_capec_typical_severity": "Very High"
}