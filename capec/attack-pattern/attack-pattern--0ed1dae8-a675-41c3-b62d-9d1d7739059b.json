{
    "type": "attack-pattern",
    "id": "attack-pattern--0ed1dae8-a675-41c3-b62d-9d1d7739059b",
    "created_by_ref": "identity--8f6c4831-6b8a-469b-b654-9dcaeede2d35",
    "created": "2018-03-06T15:56:00.729Z",
    "modified": "2018-03-06T15:56:00.729Z",
    "name": "Command Line Execution through SQL Injection",
    "description": "An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host.",
    "external_references": [
        {
            "source_name": "capec",
            "url": "https://capec.mitre.org/data/definitions/108.html",
            "external_id": "CAPEC-108"
        },
        {
            "source_name": "cwe",
            "url": "http://cwe.mitre.org/data/definitions/89.html",
            "external_id": "CWE-89"
        },
        {
            "source_name": "cwe",
            "url": "http://cwe.mitre.org/data/definitions/74.html",
            "external_id": "CWE-74"
        },
        {
            "source_name": "cwe",
            "url": "http://cwe.mitre.org/data/definitions/20.html",
            "external_id": "CWE-20"
        },
        {
            "source_name": "cwe",
            "url": "http://cwe.mitre.org/data/definitions/78.html",
            "external_id": "CWE-78"
        },
        {
            "source_name": "cwe",
            "url": "http://cwe.mitre.org/data/definitions/114.html",
            "external_id": "CWE-114"
        }
    ],
    "object_marking_refs": [
        "marking-definition--aee86263-8856-421f-b382-457d8408db7d"
    ],
    "x_capec_abstraction": "Detailed",
    "x_capec_consequences": {
        "Run Arbitrary Code": "Execute unauthorized code or commands"
    },
    "x_capec_example_instances": [
        "SQL injection vulnerability in Cacti 0.8.6i and earlier, when register_argc_argv is enabled, allows remote attackers to execute arbitrary SQL commands via the (1) second or (2) third arguments to cmd.php. NOTE: this issue can be leveraged to execute arbitrary commands since the SQL query results are later used in the polling_items array and popen function (CVE-2006-6799).\nReference: http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6799"
    ],
    "x_capec_likelihood_of_attack": "Low",
    "x_capec_prerequisites": [
        "The application does not properly validate data before storing in the database",
        "Backend application implicitly trusts the data stored in the database",
        "Malicious data is used on the backend as a command line argument"
    ],
    "x_capec_skills_required": {
        "The attacker most likely has to be familiar with the internal functionality of the system to launch this attack. Without that knowledge, there are not many feedback mechanisms to give an attacker the indication of how to perform command injection or whether the attack is succeeding.": "High"
    },
    "x_capec_typical_severity": "Very High",
    "x_resources_required": "None: No specialized resources are required to execute this type of attack."
}