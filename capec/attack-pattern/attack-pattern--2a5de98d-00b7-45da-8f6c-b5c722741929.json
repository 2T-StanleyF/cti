{
    "type": "bundle",
    "id": "bundle--e7fedaae-9f34-49f0-8c7b-19ef7f3ad312",
    "spec_version": "2.0",
    "objects": [
        {
            "type": "attack-pattern",
            "id": "attack-pattern--2a5de98d-00b7-45da-8f6c-b5c722741929",
            "created_by_ref": "identity--99e72de9-cd42-43b1-906d-c4f855fd3322",
            "created": "2014-06-23T00:00:00.000Z",
            "modified": "2019-09-30T00:00:00.000Z",
            "name": "Reflection Injection",
            "description": "An adversary supplies a value to the target application which is then used by reflection methods to identify a class, method, or field. For example, in the Java programming language the reflection libraries permit an application to inspect, load, and invoke classes and their components by name. If an adversary can control the input into these methods including the name of the class/method/field or the parameters passed to methods, they can cause the targeted application to invoke incorrect methods, read random fields, or even to load and utilize malicious classes that the adversary created. This can lead to the application revealing sensitive information, returning incorrect results, or even having the adversary take control of the targeted application.",
            "external_references": [
                {
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/138.html",
                    "external_id": "CAPEC-138"
                }
            ],
            "object_marking_refs": [
                "marking-definition--7af89974-8179-4268-a77a-47d3f7bc1c89"
            ],
            "x_capec_abstraction": "Standard",
            "x_capec_prerequisites": [
                "The target application must utilize reflection libraries and allow users to directly control the parameters to these methods. If the adversary can host classes where the target can invoke them, more powerful variants of this attack are possible.",
                "The target application must accept a string as user input, fail to sanitize characters that have a special meaning in the parameter encoding, and insert the user-supplied string in an encoding which is then processed."
            ],
            "x_capec_resources_required": [
                "None: No specialized resources are required to execute this type of attack."
            ],
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "Very High",
            "x_capec_version": "3.2"
        }
    ]
}