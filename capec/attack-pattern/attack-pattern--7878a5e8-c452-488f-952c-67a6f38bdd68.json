{
    "type": "attack-pattern",
    "id": "attack-pattern--7878a5e8-c452-488f-952c-67a6f38bdd68",
    "created_by_ref": "identity--d922e967-ff9b-4f27-97e6-2fc5f54aac51",
    "created": "2018-03-05T19:06:10.430Z",
    "modified": "2018-03-05T19:06:10.430Z",
    "name": "Fuzzing",
    "description": "In this attack pattern, the adversary leverages fuzzing to try to identify weaknesses in the system. Fuzzing is a software security and functionality testing method that feeds randomly constructed input to the system and looks for an indication that a failure in response to that input has occurred. Fuzzing treats the system as a black box and is totally free from any preconceptions or assumptions about the system. Fuzzing can help an attacker discover certain assumptions made about user input in the system. Fuzzing gives an attacker a quick way of potentially uncovering some of these assumptions despite not necessarily knowing anything about the internals of the system. These assumptions can then be turned against the system by specially crafting user input that may allow an attacker to achieve his goals.",
    "external_references": [
        {
            "source_name": "capec",
            "url": "https://capec.mitre.org/data/definitions/28.html",
            "external_id": "CAPEC-28"
        },
        {
            "source_name": "cwe",
            "url": "http://cwe.mitre.org/data/definitions/74.html",
            "external_id": "CWE-74"
        },
        {
            "source_name": "cwe",
            "url": "http://cwe.mitre.org/data/definitions/388.html",
            "external_id": "CWE-388"
        },
        {
            "source_name": "cwe",
            "url": "http://cwe.mitre.org/data/definitions/20.html",
            "external_id": "CWE-20"
        }
    ],
    "object_marking_refs": [
        "marking-definition--068ab041-90bb-4e30-9394-d306c62765a6"
    ],
    "x_capec_abstraction": "Meta",
    "x_capec_example_instances": [
        "A fuzz test reveals that when data length for a particular field exceeds certain length, the input validation filter fails and lets the user data in unfiltered. This provides an attacker with an injection vector to deliver the malicious payload into the system."
    ],
    "x_capec_likelihood_of_attack": "High",
    "x_capec_skills_required": {
        "There is a wide variety of fuzzing tools available.": "Low"
    },
    "x_capec_typical_severity": "Medium",
    "x_resources_required": "Fuzzing tools."
}