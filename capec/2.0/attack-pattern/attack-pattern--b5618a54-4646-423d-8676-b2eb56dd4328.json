{
    "id": "bundle--ae26a693-7d8b-4445-a142-4c2c4f84c3ea",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash. By observing logs and error messages, the attacker can learn details about the configuration of the target application and might be able to cause the target to disclose sensitive information. In applications that return a stack trace along with the error, this can enumerate the chain of methods that led up to the point where the error was encountered. This can not only reveal the names of the methods (some of which may have known weaknesses) but possibly also the location of class files and libraries as well as parameter values. In some cases, the stack trace might even disclose sensitive configuration or user information.",
            "external_references": [
                {
                    "external_id": "CAPEC-215",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/215.html"
                },
                {
                    "external_id": "CWE-209",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/209.html"
                },
                {
                    "external_id": "CWE-532",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/532.html"
                }
            ],
            "id": "attack-pattern--b5618a54-4646-423d-8676-b2eb56dd4328",
            "modified": "2021-06-24T00:00:00.000Z",
            "name": "Fuzzing for application mapping",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Detailed",
            "x_capec_child_of_refs": [
                "attack-pattern--49132d37-44e8-458c-a06e-0e5b9ac9bbd6",
                "attack-pattern--7f0ec88f-b057-4a73-93d8-8a30cfdbcf77"
            ],
            "x_capec_consequences": {
                "Confidentiality": [
                    "Other (Information Leakage)"
                ]
            },
            "x_capec_example_instances": [
                "\n               <xhtml:p>The following code generates an error message that leaks the full pathname of the configuration file.</xhtml:p>\n               <xhtml:div style=\"margin-left:10px;\" class=\"bad\">$ConfigDir = \"/home/myprog/config\";$uname = GetUserInput(\"username\");ExitError(\"Bad hacker!\") if ($uname !~ /^\\w+$/);$file = \"$ConfigDir/$uname.txt\";if (! (-e $file)) { ExitError(\"Error: $file does not exist\"); }...</xhtml:div>\n               <xhtml:p>If this code is running on a server, such as a web application, then the person making the request should not know what the full pathname of the configuration directory is. By submitting a username that does not produce a $file that exists, an attacker could get this pathname. It could then be used to exploit path traversal or symbolic link following problems that may exist elsewhere in the application.</xhtml:p>\n            ",
                "\n               <xhtml:p>In languages that utilize stack traces, revealing them can give adversaries information that allows them to map functions and file locations for an application. The following Java method prints out a stack trace that exposes the application to this attack pattern.</xhtml:p>\n               <xhtml:div style=\"margin-left:10px;\" class=\"bad\">public void httpGet(HttpServletRequest request, HttpServletResponse response) {<xhtml:div style=\"margin-left:10px;\">try {<xhtml:div style=\"margin-left:10px;\">processRequest();</xhtml:div>} catch (Exception ex) {<xhtml:div style=\"margin-left:10px;\">ex.printStackTrace(response.getWriter());</xhtml:div>\n                     <xhtml:div style=\"margin-left:10px;\">return;</xhtml:div>}</xhtml:div>}</xhtml:div>\n               <xhtml:p>If this code is running on a server, such as a web application, then the adversary could cause the exception to be printed through fuzzing.</xhtml:p>\n            "
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Probing: </b>The attacker uses fuzzing tools to send random malformed messages to an application and observes for log or error messages.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>The attacker uses fuzzing tools to send random malformed messages to an application and observes for log or error messages.</td></tr></tbody></table></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Modify the parameters to get the desired information from the error messages.: </b>Attacker usually needs to modify the fuzzing parameters according to the observed error messages to get the desired sensitive information for the application. To defeat correlation, the attacker may try changing the origin IP addresses or client browser identification strings or start a new session from where they left off in obfuscating the attack.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Modify the parameters in the fuzzing tool according to the observed error messages. Repeat with enough parameters until the application has been sufficiently mapped.</td></tr><tr><td>If the application rejects the large amount of fuzzing messages from the same host machine, the attacker needs to hide the attacks by changing the IP addresses or other credentials.</td></tr></tbody></table></ol></div>",
            "x_capec_likelihood_of_attack": "High",
            "x_capec_prerequisites": [
                "The target application must fail to sanitize incoming messages adequately before processing."
            ],
            "x_capec_resources_required": [
                "Fuzzing tools, which automatically generate and send message variants, are necessary for this attack. The attacker must have sufficient access to send messages to the target. The attacker must also have the ability to observe the target application's log and/or error messages in order to collect information about the target."
            ],
            "x_capec_skills_required": {
                "Medium": "Although fuzzing parameters is not difficult, and often possible with automated fuzzing tools, interpreting the error conditions and modifying the parameters so as to move further in the process of mapping the application requires detailed knowledge of target platform, the languages and packages used as well as software design."
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "Low",
            "x_capec_version": "3.5"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}