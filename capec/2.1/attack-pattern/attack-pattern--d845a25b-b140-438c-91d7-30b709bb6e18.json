{
    "id": "bundle--6701ee09-b51b-420b-b7a0-03466bf01273",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "HTTP Request Smuggling results from the discrepancies in parsing HTTP requests between HTTP entities such as web caching proxies or application firewalls. Entities such as web servers, web caching proxies, application firewalls or simple proxies often parse HTTP requests in slightly different ways. Under specific situations where there are two or more such entities in the path of the HTTP request, a specially crafted request is seen by two attacked entities as two different sets of requests. This allows certain requests to be smuggled through to a second entity without the first one realizing it.",
            "external_references": [
                {
                    "external_id": "CAPEC-33",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/33.html"
                },
                {
                    "external_id": "CWE-444",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/444.html"
                },
                {
                    "external_id": "CWE-707",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/707.html"
                },
                {
                    "description": "HTTP Request Smuggling",
                    "external_id": "26",
                    "source_name": "WASC",
                    "url": "http://projects.webappsec.org/HTTP-Request-Smuggling"
                },
                {
                    "description": "OWASP Web Security Testing Guide, The Open Web Application Security Project (OWASP)",
                    "external_id": "REF-617",
                    "source_name": "reference_from_CAPEC",
                    "url": "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/15-Testing_for_HTTP_Splitting_Smuggling.html"
                }
            ],
            "id": "attack-pattern--d845a25b-b140-438c-91d7-30b709bb6e18",
            "modified": "2020-12-17T00:00:00.000Z",
            "name": "HTTP Request Smuggling",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "spec_version": "2.1",
            "type": "attack-pattern",
            "x_capec_abstraction": "Detailed",
            "x_capec_child_of_refs": [
                "attack-pattern--9c983530-1927-43ca-addd-63d149cda4a7"
            ],
            "x_capec_consequences": {
                "Access_Control": [
                    "Gain Privileges"
                ],
                "Authorization": [
                    "Gain Privileges"
                ],
                "Availability": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ],
                "Confidentiality": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Gain Privileges"
                ],
                "Integrity": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Modify Data"
                ]
            },
            "x_capec_example_instances": [
                "When using Sun Java System Web Proxy Server 3.x or 4.x in conjunction with Sun ONE/iPlanet 6.x, Sun Java System Application Server 7.x or 8.x, it is possible to bypass certain application firewall protections, hijack web sessions, perform Cross Site Scripting or poison the web proxy cache using HTTP Request Smuggling. Differences in the way HTTP requests are parsed by the Proxy Server and the Application Server enable malicious requests to be smuggled through to the Application Server, thereby exposing the Application Server to aforementioned attacks. See also: CVE-2006-6276",
                "Apache server 2.0.45 and version before 1.3.34, when used as a proxy, easily lead to web cache poisoning and bypassing of application firewall restrictions because of non-standard HTTP behavior. Although the HTTP/1.1 specification clearly states that a request with both \"Content-Length\" and a \"Transfer-Encoding: chunked\" headers is invalid, vulnerable versions of Apache accept such requests and reassemble the ones with \"Transfer-Encoding: chunked\" header without replacing the existing \"Content-Length\" header or adding its own. This leads to HTTP Request Smuggling using a request with a chunked body and a header with \"Content-Length: 0\". See also: CVE-2005-2088"
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Identify HTTP parsing chain: </b>Determine the technologies used in the target environment such as types of web servers, application firewalls, proxies, etc.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Investigation of the target environment to determine the types of technologies used to parse the incoming HTTP requests. Attempt to understand the parsing chain traversed by the incoming HTTP request.</td></tr></tbody></table></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Probe for vulnerable differences in HTTP parsing chain: </b>Attacker sends malformed HTTP Requests to the application looking for differences in the ways that individual layers in the parsing chain parse requests. When differences are identified, the attacker crafts specially malformed HTTP requests to determine if the identified parsing differences will allow extra requests to be smuggled through parsing layers.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Create many consecutive requests to the server. Some of which must be malformed.</td></tr><tr><td>Use a proxy tool to record the HTTP responses headers.</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Cache poisoning: </b>The attacker decides to target the cache server. The server will then cache the request and serve a wrong page to a legitimate user's request. The malicious request will most likely exploit a Cross-Site Scripting or another injection typed vulnerability.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Leverage the vulnerabilities identified in the Experiment Phase to inject malicious HTTP request that contains HTTP Request syntax that will be processed and acted on by the outer parsing layer of the cache server but not by the inner application layer. In this way it will be cached by the server without obvious sign from the application and the corrupt data will be served to future requesters.</td></tr></tbody></table><li> <p> <b>Session Hijacking: </b>The attacker decides to target the web server by crafting a malicious HTTP Request containing a second HTTP Request using syntax that will not be processed and acted on by an outer \"filter\" parsing layer but will be acted on by the inner web server/application processing layers. The application/web server will then act on the malicious HTTP Request as if it is a valid request from the client potentially subverting session management.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Leverage the vulnerabilities identified in the Experiment Phase to inject malicious HTTP request that contains HTTP Request syntax that will not be processed and acted on by the outer parsing layer of the malicious content filters but will be by the inner application/web server layer. In this way it will be acted on by the application/web server as if it is a valid request from the client.</td></tr></tbody></table></ol></div>",
            "x_capec_likelihood_of_attack": "Medium",
            "x_capec_prerequisites": [
                "An additional HTTP entity such as an application firewall or a web caching proxy between the attacker and the second entity such as a web server",
                "Differences in the way the two HTTP entities parse HTTP requests"
            ],
            "x_capec_resources_required": [
                "None: No specialized resources are required to execute this type of attack."
            ],
            "x_capec_skills_required": {
                "High": "The attacker has to have detailed knowledge of the HTTP protocol specifics and must also possess exact details on the discrepancies between the two targeted entities in parsing HTTP requests."
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.5"
        }
    ],
    "type": "bundle"
}